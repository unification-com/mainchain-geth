// Copyright 2019 The Unification Authors
// This file is part of the Unification mainchain library.
//
// The Unification mainchain library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The Unification mainchain library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the Unification mainchain library. If not, see <http://www.gnu.org/licenses/>.

package core

import (
	"bytes"
	"encoding/gob"
	"github.com/unification-com/mainchain/common"
	"github.com/unification-com/mainchain/rlp"
	"math/big"
	"strings"
	"testing"
)

const allocDataConst = "\xf9\x05?\u9000\x80\xa5\x10\xff\x83\x04\x01\x02\xff\x84\x00\x01\xff\x82\x01\xff\x82\x00\x00\x0e\xff\x81\x01\x01\x02\xff\x82\x00\x01\x06\x01@\x00\x00\x04\xff\x84\x00\x00\xe9\x01\x80\x80\xa5\x10\xff\x83\x04\x01\x02\xff\x84\x00\x01\xff\x82\x01\xff\x82\x00\x00\x0e\xff\x81\x01\x01\x02\xff\x82\x00\x01\x06\x01@\x00\x00\x04\xff\x84\x00\x00\xf9\x04\x89\x81\x91\x80\xb9\x03o`\x80`@R`\x046\x10a\x00bW`\x005|\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x04c\xff\xff\xff\xff\x16\x80c49C\xbd\x14a\x00gW\x80cO\xf15q\x14a\x00\xbeW\x80c\xa3\xb7\x88s\x14a\x01\x15W\x80c\u0652\x81\x8d\x14a\x01lW[`\x00\x80\xfd[4\x80\x15a\x00sW`\x00\x80\xfd[Pa\x00|a\x01\x83V[`@Q\x80\x82s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x00\xcaW`\x00\x80\xfd[Pa\x00\xd3a\x01\xa8V[`@Q\x80\x82s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x01!W`\x00\x80\xfd[Pa\x01*a\x01\xceV[`@Q\x80\x82s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x01xW`\x00\x80\xfd[Pa\x01\x81a\x01\xf4V[\x00[`\x00\x80\x90T\x90a\x01\x00\n\x90\x04s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81V[`\x01`\x00\x90T\x90a\x01\x00\n\x90\x04s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81V[`\x02`\x00\x90T\x90a\x01\x00\n\x90\x04s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81V[s\xf3\x0f\x95\x1b\x04&\xf8\xbf7\xacq\x96t\a\b\x13X\xdfz{s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x163s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x14\x15\x15a\x02BWa\x03AV[s\xa1:q\xdf\xe5\xcdW\xf9\xb6~\u01a5J\u04aeu7\xd7\xfc;`\x00\x80a\x01\x00\n\x81T\x81s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x02\x17\x90UPs\xb4\u007f\u041f\x1d7\x9c\xe2\u027f\xf5\x9df\x8c\U00037e54\xa2\xb7`\x01`\x00a\x01\x00\n\x81T\x81s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x02\x17\x90UPs\xd7\x1a\xd3&6f\xe00\x04G\x9b0\u0284\n&\xea\u0177c`\x02`\x00a\x01\x00\n\x81T\x81s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x02\x17\x90UP[V\x00\xa1ebzzr0X \x03\v\xad\xbc\xfe\xf3\u05b14\xe8\xae1\x8dW\xc1\x83\xdabf{@\xae\x9a%\x13\\\xf53\xbf\x92\xe2\x02\x00)\xb9\x01\x11\x10\xff\x83\x04\x01\x02\xff\x84\x00\x01\xff\x82\x01\xff\x82\x00\x00\x0e\xff\x81\x01\x01\x02\xff\x82\x00\x01\x06\x01@\x00\x00\xff\xef\xff\x84\x00\x03 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xb4\u007f\xff\xd0\xff\x9f\x1d7\xff\x9c\xff\xe2\xff\xc9\xff\xbf\xff\xf5\xff\x9df\xff\x8c\xff\xf0\xff\xb7\xff\xb9\xff\x94\xff\xa2\xff\xb7 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xca)\xff\xf1'Tp\xff\xde\xff\x81\xff\xden\x1b\xff\xb5:U\"\xff\x8d\xff\xa6v\xff\xe7R \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xa1:q\xff\xdf\xff\xe5\xff\xcdW\xff\xf9\xff\xb6~\xff\xc6\xff\xa5J\xff\xd2\xff\xaeu7\xff\xd7\xff\xfc;\xf8]\x94\xf3\x0f\x95\x1b\x04&\xf8\xbf7\xacq\x96t\a\b\x13X\xdfz{\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xa5\x10\xff\x83\x04\x01\x02\xff\x84\x00\x01\xff\x82\x01\xff\x82\x00\x00\x0e\xff\x81\x01\x01\x02\xff\x82\x00\x01\x06\x01@\x00\x00\x04\xff\x84\x00\x00"

func TestDecodePreallocWithCodeAndStorage(t *testing.T) {
	var p []struct{ Addr, Balance *big.Int
		Code []byte
		Storage []byte
	}
	if err := rlp.NewStream(strings.NewReader(allocDataConst), 0).Decode(&p); err != nil {
		t.Errorf("Could not RLP decode prealloc: %s", err)
	}
	for _, account := range p {
		t.Log(common.BigToAddress(account.Addr).Hex())
		t.Log(account.Balance.String())
		t.Log(account.Code)

		decBuf := bytes.NewBuffer(account.Storage)
		var storage map[common.Hash]common.Hash
		err := gob.NewDecoder(decBuf).Decode(&storage)

		if err != nil {
			t.Errorf("Gob could not decode account.Storage: %s", err)
		}

		t.Log(storage)

	}
}
